/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PrivacyImport } from './routes/privacy'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings.index'
import { Route as LoginIndexImport } from './routes/login.index'
import { Route as ExpensesIndexImport } from './routes/expenses.index'
import { Route as SettingsAccountImport } from './routes/settings.account'
import { Route as LoginServiceIndexImport } from './routes/login.$service.index'
import { Route as ExpensesReviewIndexImport } from './routes/expenses.review.index'
import { Route as ExpensesNewIndexImport } from './routes/expenses.new.index'
import { Route as ExpensesUidIndexImport } from './routes/expenses.$uid.index'

// Create/Update Routes

const PrivacyRoute = PrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const ExpensesIndexRoute = ExpensesIndexImport.update({
  id: '/expenses/',
  path: '/expenses/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsAccountRoute = SettingsAccountImport.update({
  id: '/settings/account',
  path: '/settings/account',
  getParentRoute: () => rootRoute,
} as any)

const LoginServiceIndexRoute = LoginServiceIndexImport.update({
  id: '/login/$service/',
  path: '/login/$service/',
  getParentRoute: () => rootRoute,
} as any)

const ExpensesReviewIndexRoute = ExpensesReviewIndexImport.update({
  id: '/expenses/review/',
  path: '/expenses/review/',
  getParentRoute: () => rootRoute,
} as any)

const ExpensesNewIndexRoute = ExpensesNewIndexImport.update({
  id: '/expenses/new/',
  path: '/expenses/new/',
  getParentRoute: () => rootRoute,
} as any)

const ExpensesUidIndexRoute = ExpensesUidIndexImport.update({
  id: '/expenses/$uid/',
  path: '/expenses/$uid/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyImport
      parentRoute: typeof rootRoute
    }
    '/settings/account': {
      id: '/settings/account'
      path: '/settings/account'
      fullPath: '/settings/account'
      preLoaderRoute: typeof SettingsAccountImport
      parentRoute: typeof rootRoute
    }
    '/expenses/': {
      id: '/expenses/'
      path: '/expenses'
      fullPath: '/expenses'
      preLoaderRoute: typeof ExpensesIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/expenses/$uid/': {
      id: '/expenses/$uid/'
      path: '/expenses/$uid'
      fullPath: '/expenses/$uid'
      preLoaderRoute: typeof ExpensesUidIndexImport
      parentRoute: typeof rootRoute
    }
    '/expenses/new/': {
      id: '/expenses/new/'
      path: '/expenses/new'
      fullPath: '/expenses/new'
      preLoaderRoute: typeof ExpensesNewIndexImport
      parentRoute: typeof rootRoute
    }
    '/expenses/review/': {
      id: '/expenses/review/'
      path: '/expenses/review'
      fullPath: '/expenses/review'
      preLoaderRoute: typeof ExpensesReviewIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/$service/': {
      id: '/login/$service/'
      path: '/login/$service'
      fullPath: '/login/$service'
      preLoaderRoute: typeof LoginServiceIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/settings/account': typeof SettingsAccountRoute
  '/expenses': typeof ExpensesIndexRoute
  '/login': typeof LoginIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/expenses/$uid': typeof ExpensesUidIndexRoute
  '/expenses/new': typeof ExpensesNewIndexRoute
  '/expenses/review': typeof ExpensesReviewIndexRoute
  '/login/$service': typeof LoginServiceIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/settings/account': typeof SettingsAccountRoute
  '/expenses': typeof ExpensesIndexRoute
  '/login': typeof LoginIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/expenses/$uid': typeof ExpensesUidIndexRoute
  '/expenses/new': typeof ExpensesNewIndexRoute
  '/expenses/review': typeof ExpensesReviewIndexRoute
  '/login/$service': typeof LoginServiceIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/privacy': typeof PrivacyRoute
  '/settings/account': typeof SettingsAccountRoute
  '/expenses/': typeof ExpensesIndexRoute
  '/login/': typeof LoginIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/expenses/$uid/': typeof ExpensesUidIndexRoute
  '/expenses/new/': typeof ExpensesNewIndexRoute
  '/expenses/review/': typeof ExpensesReviewIndexRoute
  '/login/$service/': typeof LoginServiceIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/privacy'
    | '/settings/account'
    | '/expenses'
    | '/login'
    | '/settings'
    | '/expenses/$uid'
    | '/expenses/new'
    | '/expenses/review'
    | '/login/$service'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/privacy'
    | '/settings/account'
    | '/expenses'
    | '/login'
    | '/settings'
    | '/expenses/$uid'
    | '/expenses/new'
    | '/expenses/review'
    | '/login/$service'
  id:
    | '__root__'
    | '/'
    | '/privacy'
    | '/settings/account'
    | '/expenses/'
    | '/login/'
    | '/settings/'
    | '/expenses/$uid/'
    | '/expenses/new/'
    | '/expenses/review/'
    | '/login/$service/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivacyRoute: typeof PrivacyRoute
  SettingsAccountRoute: typeof SettingsAccountRoute
  ExpensesIndexRoute: typeof ExpensesIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  ExpensesUidIndexRoute: typeof ExpensesUidIndexRoute
  ExpensesNewIndexRoute: typeof ExpensesNewIndexRoute
  ExpensesReviewIndexRoute: typeof ExpensesReviewIndexRoute
  LoginServiceIndexRoute: typeof LoginServiceIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivacyRoute: PrivacyRoute,
  SettingsAccountRoute: SettingsAccountRoute,
  ExpensesIndexRoute: ExpensesIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  ExpensesUidIndexRoute: ExpensesUidIndexRoute,
  ExpensesNewIndexRoute: ExpensesNewIndexRoute,
  ExpensesReviewIndexRoute: ExpensesReviewIndexRoute,
  LoginServiceIndexRoute: LoginServiceIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/privacy",
        "/settings/account",
        "/expenses/",
        "/login/",
        "/settings/",
        "/expenses/$uid/",
        "/expenses/new/",
        "/expenses/review/",
        "/login/$service/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/privacy": {
      "filePath": "privacy.tsx"
    },
    "/settings/account": {
      "filePath": "settings.account.tsx"
    },
    "/expenses/": {
      "filePath": "expenses.index.tsx"
    },
    "/login/": {
      "filePath": "login.index.tsx"
    },
    "/settings/": {
      "filePath": "settings.index.tsx"
    },
    "/expenses/$uid/": {
      "filePath": "expenses.$uid.index.tsx"
    },
    "/expenses/new/": {
      "filePath": "expenses.new.index.tsx"
    },
    "/expenses/review/": {
      "filePath": "expenses.review.index.tsx"
    },
    "/login/$service/": {
      "filePath": "login.$service.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
